/*******************************************************************************
 * Copyright (c) 2017 Association Cénotélie (cenotelie.fr)
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General
 * Public License along with this program.
 * If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/

grammar Javascript
{
	options
	{
		Axiom = "program";
		Separator = "Separator";
	}
	terminals
	{
		LineTerminator  -> U+000D /* CR */
						|  U+000A /* LF */
						|  U+000D U+000A /* CR LF */
						|  U+2028 /* LS */
						|  U+2029 /* PS */ ;
		
		WhiteSpace  	-> U+0020 | U+0009 | U+000B | U+000C | U+00A0 | U+FEFF ;
		CommentLine		-> '//' (.* - (.* LineTerminator .*)) LineTerminator ;
		CommentBlock	-> '/*' (.* - (.* '*/' .*)) '*/' ;
		
		Separator		-> (WhiteSpace | CommentLine | CommentBlock | LineTerminator)+;
		
		IdStart			-> [a-zA-Z_$] ; // \uc{Lu} | \uc{Ll} | '_' | '$' ;
		Identifier		-> IdStart (IdStart | [0-9])* ; // IdStart (IdStart | \uc{Nd})* ;
		
		DecimalInteger	-> '0' | [1-9] [0-9]* ;
		DecimalLiteral	-> DecimalInteger? '.' [0-9]* ([eE] ('+'|'-')? [0-9]+)?
						|  DecimalInteger ([eE] ('+'|'-')? [0-9]+)? ;
		HexLiteral		-> '0' [xX] [0-9a-fA-F]+ ;
		
		DoubleQuoteString	-> '"' (
									(. - ('"' | LineTerminator | '\\'))
									| '\\' LineTerminator
									| '\\' ('\'' | '"' | '\\' | [bfnrtv])
									| '\\x' [0-9a-fA-F]{2}
									| '\\u' [0-9a-fA-F]{4}
									| '\\0'
								)* '"' ;
		SingleQuoteString	-> '\'' (
									(. - ('\'' | LineTerminator | '\\'))
									| '\\' LineTerminator
									| '\\' ('\'' | '"' | '\\' | [bfnrtv])
									| '\\x' [0-9a-fA-F]{2}
									| '\\u' [0-9a-fA-F]{4}
									| '\\0'
								)* '\'' ;
		
		RegExpLiteral		-> '/' 
								(	(. - (LineTerminator | '\\' | '/' | '[' | '*'))
									| '\\' (. - LineTerminator)
									| '[' (
											(. - (LineTerminator | ']' | '\\'))
											| '\\' (. - LineTerminator)
										)* ']'
								)
								(	(. - (LineTerminator | '\\' | '/' | '['))
									| '\\' (. - LineTerminator)
									| '[' (
											(. - (LineTerminator | ']' | '\\'))
											| '\\' (. - LineTerminator)
										)* ']'
									
								)*
								'/' (IdStart | [0-9])* ;
		context accessors
		{
			GET -> 'get';
			SET -> 'set';
		}
	}
	rules
	{
		literal				-> 'null'
							|  lit_boolean
							|  lit_numeric
							|  lit_string
							|  lit_regex ;
		lit_boolean			-> 'true' | 'false' ;
		lit_numeric			-> DecimalLiteral | HexLiteral ;
		lit_string			-> DoubleQuoteString | SingleQuoteString ;
		lit_regex			-> RegExpLiteral ;
		lit_array			-> '[' elision? ']'
							|  '[' elements elision? ']' ;
		elements			-> (elision? exp_assign)+ ;
		elision				-> ','+ ;
		lit_object			-> '{' '}'
							|  '{' properties ','? '}' ;
		properties			-> prop_assign (',' prop_assign)* ;
		prop_assign			-> #accessors{ GET | SET | prop_name } ':' exp_assign
							|  #accessors{ GET } prop_name '(' ')' '{' function_body '}'
							|  #accessors{ SET } prop_name '(' prop_set_params ')' '{' function_body '}' ;
		prop_name			-> Identifier | lit_string | lit_numeric ;
		prop_set_params		-> Identifier ;
		
		arguments			-> '(' (exp_assign (',' exp_assign)*)? ')' ;
		
		exp_primary			-> 'this'
							|  Identifier
							|  literal
							|  lit_array
							|  lit_object
							|  '(' expression ')' ;
		exp_member			-> exp_primary
							|  exp_function ;
		exp_lhs				-> exp_member
							|  'new' exp_member
							|  exp_lhs arguments
							|  exp_lhs '[' expression ']'
							|  exp_lhs '.' Identifier ;
		exp_postfix			-> exp_lhs
							|  exp_postfix '++'
							|  exp_postfix '--' ;
		exp_unary			-> exp_postfix
							|  'delete' exp_unary
							|  'void' exp_unary
							|  'typeof' exp_unary
							|  '++' exp_unary
							|  '--' exp_unary
							|  '+' exp_unary
							|  '-' exp_unary
							|  '~' exp_unary
							|  '!' exp_unary ;
		exp_mult			-> exp_unary
							|  exp_mult '*' exp_unary
							|  exp_mult '/' exp_unary
							|  exp_mult '%' exp_unary ;
		exp_add				-> exp_mult
							|  exp_add '+' exp_mult
							|  exp_add '-' exp_mult ;
		exp_shift			-> exp_add
							|  exp_shift '<<' exp_add
							|  exp_shift '>>' exp_add
							|  exp_shift '>>>' exp_add ;
		exp_rel				-> exp_shift
							|  exp_rel '<' exp_shift
							|  exp_rel '>' exp_shift
							|  exp_rel '<=' exp_shift
							|  exp_rel '>=' exp_shift
							|  exp_rel 'instanceof' exp_shift
							|  exp_rel 'in' exp_shift ;
		exp_rel_notin		-> exp_shift
							|  exp_rel_notin '<' exp_shift
							|  exp_rel_notin '>' exp_shift
							|  exp_rel_notin '<=' exp_shift
							|  exp_rel_notin '>=' exp_shift
							|  exp_rel_notin 'instanceof' exp_shift ;
		exp_equal<base>		-> base
							|  exp_equal<base> '==' base
							|  exp_equal<base> '!=' base
							|  exp_equal<base> '===' base
							|  exp_equal<base> '!==' base ;
		exp_band<base>		-> exp_equal<base>
							|  exp_band<base> '&' exp_equal<base> ;
		exp_bxor<base>		-> exp_band<base>
							|  exp_bxor<base> '^' exp_band<base> ;
		exp_bor<base>		-> exp_bxor<base>
							|  exp_bor<base> '|' exp_bxor<base> ;
		exp_land<base>		-> exp_bor<base>
							|  exp_land<base> '&&' exp_bor<base> ;
		exp_lor<base>		-> exp_land<base>
							|  exp_lor<base> '||' exp_land<base> ;
		exp_cond<base>		-> exp_lor<base>
							|  exp_lor<base> '?' exp_assign ':' exp_assign ;
		exp_assign<base>	-> exp_cond<base>
							|  exp_lhs '=' exp_assign<base>
							|  exp_lhs '*=' exp_assign<base>
							|  exp_lhs '/=' exp_assign<base>
							|  exp_lhs '%=' exp_assign<base>
							|  exp_lhs '+=' exp_assign<base>
							|  exp_lhs '-=' exp_assign<base>
							|  exp_lhs '<<=' exp_assign<base>
							|  exp_lhs '>>=' exp_assign<base>
							|  exp_lhs '>>>=' exp_assign<base>
							|  exp_lhs '&=' exp_assign<base>
							|  exp_lhs '^=' exp_assign<base>
							|  exp_lhs '|=' exp_assign<base> ;
		exp_assign			-> exp_assign<exp_rel> ;
		expression<base>	-> exp_assign<base> (',' exp_assign<base>)* ;
		expression			-> expression<exp_rel> ;
		expression_notin	-> expression<exp_rel_notin> ;
		
		statement			-> stmt_if_open | stmt_close ;
		stmt_close			-> stmt_if_closed
							|  stmt_block
							|  stmt_variable
							|  stmt_empty
							|  stmt_expression
							|  stmt_iterartion
							|  stmt_continue
							|  stmt_break
							|  stmt_goto
							|  stmt_return
							|  stmt_with
							|  stmt_labelled
							|  stmt_switch
							|  stmt_throw
							|  stmt_try
							|  stmt_debugger ;
		
		stmt_block			-> '{' statement* '}' ;
		stmt_variable		-> 'var' stmt_var_decls<exp_rel> ';' ;
		stmt_var_decls<base>-> stmt_var_decl<base> (',' stmt_var_decl<base>)* ;
		stmt_var_decl<base>	-> Identifier initialiser<base>? ;
		initialiser<base>	-> '=' exp_assign<base> ;
		stmt_empty			-> ';' ;
		stmt_expression		-> expression ';' ;
		stmt_if_closed		-> 'if' '(' expression ')' stmt_close 'else' stmt_close ;
		stmt_if_open		-> 'if' '(' expression ')' statement
							|  'if' '(' expression ')' stmt_close 'else' stmt_if_open ;
		stmt_iterartion		-> 'do' statement  'while' '(' expression ')' ';'
							|  'while' '(' expression ')' statement
							|  'for' '(' expression_notin? ';' expression? ';' expression? ')' statement
							|  'for' '(' 'var' stmt_var_decls<exp_rel_notin> ';' expression? ';' expression? ')' statement
							|  'for' '(' exp_lhs 'in' expression ')' statement
							|  'for' '(' 'var' stmt_var_decl<exp_rel_notin> 'in' expression ')' statement ;
		stmt_continue		-> 'continue' ';'
							|  'continue' Identifier ';' ;
		stmt_break			-> 'break' ';'
							|  'break' Identifier ';' ;
		stmt_goto			-> 'goto' Identifier ';' ;
		stmt_return			-> 'return' ';'
							|  'return' expression ';' ;
		stmt_with			-> 'with' '(' expression ')' statement ;
		stmt_switch			-> 'switch' '(' expression ')' stmt_switch_block ;
		stmt_switch_block	-> '{' clauses '}'
							|  '{' clauses clause_default clauses '}' ;
		clauses				-> clause* ;
		clause				-> 'case' expression ':' statement* ;
		clause_default		-> 'default' ':' statement* ;
		stmt_labelled		-> Identifier ':' statement ;
		stmt_throw			-> 'throw' expression ';' ;
		stmt_try			-> 'try' stmt_block catch
							|  'try' stmt_block finally
							|  'try' stmt_block catch finally ;
		catch				-> 'catch' '(' Identifier ')' stmt_block ;
		finally				-> 'finally' stmt_block ;
		stmt_debugger		-> 'debugger' ';' ;
		
		func_decl			-> 'function' Identifier '(' parameters ')' '{' function_body '}' ;
		exp_function		-> 'function' Identifier? '(' parameters ')' '{' function_body '}' ;
		parameters			-> (Identifier (',' Identifier)*)? ;
		function_body		-> source_elems ;
		source_elems		-> source_elem* ;
		source_elem			-> statement
							|  func_decl ;
		
		program				-> source_elems ;
	}
}
