use hime_redist::symbols::Symbol;
use  crate::types::{Token};
use crate::hime::TokenToHimeTerminal;

pub const TERMINALS: &[Symbol] = &[
    Symbol { id: 0x0001, name: "Îµ" },
    Symbol { id: 0x0002, name: "$" },
    Symbol { id: 0x0003, name: "LeftParen" },
    Symbol { id: 0x0004, name: "RightParen" },
    Symbol { id: 0x0005, name: "LeftBrace" },
    Symbol { id: 0x0006, name: "RightBrace" },
    Symbol { id: 0x0007, name: "LeftSquare" },
    Symbol { id: 0x0008, name: "RightSquare" },
    Symbol { id: 0x0009, name: "LeftArrow" },
    Symbol { id: 0x000A, name: "RightArrow" },
    Symbol { id: 0x000B, name: "RightFatArrow" },
    Symbol { id: 0x000C, name: "LeftFatArrow" },
    Symbol { id: 0x000D, name: "DoubleColon" },
    Symbol { id: 0x000E, name: "Forall" },
    Symbol { id: 0x000F, name: "Forallu" },
    Symbol { id: 0x0010, name: "Equals" },
    Symbol { id: 0x0011, name: "Pipe" },
    Symbol { id: 0x0012, name: "Tick" },
    Symbol { id: 0x0013, name: "Dot" },
    Symbol { id: 0x0014, name: "Comma" },
    Symbol { id: 0x0015, name: "Underscore" },
    Symbol { id: 0x0016, name: "Backslash" },
    Symbol { id: 0x0017, name: "QualLowerName" },
    Symbol { id: 0x0018, name: "LowerName" },
    Symbol { id: 0x0019, name: "SymbolDoubleDot" },
    Symbol { id: 0x001A, name: "Ado" },
    Symbol { id: 0x001B, name: "As" },
    Symbol { id: 0x001C, name: "Case" },
    Symbol { id: 0x001D, name: "Class" },
    Symbol { id: 0x001E, name: "Data" },
    Symbol { id: 0x001F, name: "Derive" },
    Symbol { id: 0x0020, name: "Do" },
    Symbol { id: 0x0021, name: "Else" },
    Symbol { id: 0x0022, name: "False" },
    Symbol { id: 0x0023, name: "Foreign" },
    Symbol { id: 0x0024, name: "Hiding" },
    Symbol { id: 0x0025, name: "Import" },
    Symbol { id: 0x0026, name: "If" },
    Symbol { id: 0x0027, name: "In" },
    Symbol { id: 0x0028, name: "Infix" },
    Symbol { id: 0x0029, name: "Infixl" },
    Symbol { id: 0x002A, name: "Infixr" },
    Symbol { id: 0x002B, name: "Instance" },
    Symbol { id: 0x002C, name: "Kind" },
    Symbol { id: 0x002D, name: "Let" },
    Symbol { id: 0x002E, name: "Module" },
    Symbol { id: 0x002F, name: "Newtype" },
    Symbol { id: 0x0030, name: "Nominal" },
    Symbol { id: 0x0031, name: "Phantom" },
    Symbol { id: 0x0032, name: "Of" },
    Symbol { id: 0x0033, name: "Representational" },
    Symbol { id: 0x0034, name: "Role" },
    Symbol { id: 0x0035, name: "Then" },
    Symbol { id: 0x0036, name: "True" },
    Symbol { id: 0x0037, name: "Type" },
    Symbol { id: 0x0038, name: "Where" },
    Symbol { id: 0x0039, name: "QualUpperName" },
    Symbol { id: 0x003A, name: "UpperName" },
    Symbol { id: 0x003B, name: "QualOperator" },
    Symbol { id: 0x003C, name: "Operator" },
    Symbol { id: 0x003D, name: "Colon" },
    Symbol { id: 0x003E, name: "OperatorSub" },
    Symbol { id: 0x003F, name: "OperatorHash" },
    Symbol { id: 0x0040, name: "OperatorAt" },
    Symbol { id: 0x0041, name: "QualSymbolName" },
    Symbol { id: 0x0042, name: "SymbolName" },
    Symbol { id: 0x0043, name: "SymbolArr" },
    Symbol { id: 0x0044, name: "Hole" },
    Symbol { id: 0x0045, name: "Char" },
    Symbol { id: 0x0046, name: "String" },
    Symbol { id: 0x0047, name: "RawString" },
    Symbol { id: 0x0048, name: "Int" },
    Symbol { id: 0x0049, name: "Number" },
    Symbol { id: 0x004A, name: "LayoutStart" },
    Symbol { id: 0x004B, name: "TokLayoutSep" },
    Symbol { id: 0x004C, name: "TokLayoutEnd" },
    Symbol { id: 0x004D, name: "Eof" }];

pub const VARIABLES: &[Symbol] = &[
    Symbol { id: 0x004E, name: "type" },
    Symbol { id: 0x004F, name: "type1" },
    Symbol { id: 0x0050, name: "type2" },
    Symbol { id: 0x0051, name: "type3" },
    Symbol { id: 0x0052, name: "type4" },
    Symbol { id: 0x0053, name: "type5" },
    Symbol { id: 0x0054, name: "typeAtom" },
    Symbol { id: 0x0055, name: "typeKindedAtom" },
    Symbol { id: 0x0056, name: "qualOp" },
    Symbol { id: 0x0057, name: "qualIdent" },
    Symbol { id: 0x0058, name: "qualProperName" },
    Symbol { id: 0x0059, name: "qualSymbol" },
    Symbol { id: 0x005A, name: "boolean" },
    Symbol { id: 0x005B, name: "char" },
    Symbol { id: 0x005C, name: "string" },
    Symbol { id: 0x005D, name: "number" },
    Symbol { id: 0x005E, name: "hole" },
    Symbol { id: 0x005F, name: "ident" },
    Symbol { id: 0x0060, name: "typeVarBinding" },
    Symbol { id: 0x0061, name: "forall" },
    Symbol { id: 0x0062, name: "label" },
    Symbol { id: 0x0063, name: "rowLabel" },
    Symbol { id: 0x0064, name: "row" },
    Symbol { id: 0x0065, name: "expr" },
    Symbol { id: 0x0066, name: "expr1" },
    Symbol { id: 0x0067, name: "expr2" },
    Symbol { id: 0x0068, name: "exprBacktick" },
    Symbol { id: 0x0069, name: "expr3" },
    Symbol { id: 0x006A, name: "expr4" },
    Symbol { id: 0x006B, name: "expr5" },
    Symbol { id: 0x006C, name: "expr6" },
    Symbol { id: 0x006D, name: "expr7" },
    Symbol { id: 0x006E, name: "exprAtom" },
    Symbol { id: 0x006F, name: "recordLabel" },
    Symbol { id: 0x0070, name: "letBinding" },
    Symbol { id: 0x0071, name: "caseBranch" },
    Symbol { id: 0x0072, name: "exprWhere" },
    Symbol { id: 0x0073, name: "guardedDecl" },
    Symbol { id: 0x0074, name: "guardedDeclExpr" },
    Symbol { id: 0x0075, name: "guardedCase" },
    Symbol { id: 0x0076, name: "guardedCaseExpr" },
    Symbol { id: 0x0077, name: "doBlock" },
    Symbol { id: 0x0078, name: "adoBlock" },
    Symbol { id: 0x0079, name: "doStatement" },
    Symbol { id: 0x007A, name: "guard" },
    Symbol { id: 0x007B, name: "patternGuard" },
    Symbol { id: 0x007C, name: "binder" },
    Symbol { id: 0x007D, name: "binder1" },
    Symbol { id: 0x007E, name: "binder2" },
    Symbol { id: 0x007F, name: "binderAtom" },
    Symbol { id: 0x0080, name: "recordUpdate" },
    Symbol { id: 0x0081, name: "recordUpdateOrLabel" },
    Symbol { id: 0x0082, name: "__V130" },
    Symbol { id: 0x0083, name: "sep<rowLabel, Dot>" },
    Symbol { id: 0x0084, name: "sep1<rowLabel, Dot>" },
    Symbol { id: 0x0085, name: "__V133" },
    Symbol { id: 0x0086, name: "manySep<letBinding, LayoutSep>" },
    Symbol { id: 0x0087, name: "manySep1<letBinding, LayoutSep>" },
    Symbol { id: 0x0088, name: "sep<expr, Dot>" },
    Symbol { id: 0x0089, name: "sep1<expr, Dot>" },
    Symbol { id: 0x008A, name: "manySep<caseBranch, LayoutSep>" },
    Symbol { id: 0x008B, name: "manySep1<caseBranch, LayoutSep>" },
    Symbol { id: 0x008C, name: "sep<binder1, Dot>" },
    Symbol { id: 0x008D, name: "sep1<binder1, Dot>" },
    Symbol { id: 0x008E, name: "sep<recordUpdateOrLabel, Dot>" },
    Symbol { id: 0x008F, name: "sep1<recordUpdateOrLabel, Dot>" },
    Symbol { id: 0x0090, name: "sep<label, Dot>" },
    Symbol { id: 0x0091, name: "sep1<label, Dot>" },
    Symbol { id: 0x0092, name: "delim<LeftParen, expr, Dot, RightParen>" },
    Symbol { id: 0x0093, name: "delim<LeftBrace, recordLabel, Dot, RightBrace>" },
    Symbol { id: 0x0094, name: "sep<recordLabel, Dot>" },
    Symbol { id: 0x0095, name: "sep1<recordLabel, Dot>" },
    Symbol { id: 0x0096, name: "__V150" },
    Symbol { id: 0x0097, name: "sep<binder1, LayoutSep>" },
    Symbol { id: 0x0098, name: "sep1<binder1, LayoutSep>" },
    Symbol { id: 0x0099, name: "__V153" },
    Symbol { id: 0x009A, name: "__V154" },
    Symbol { id: 0x009B, name: "manySep<doStatement, LayoutSep>" },
    Symbol { id: 0x009C, name: "manySep1<doStatement, LayoutSep>" },
    Symbol { id: 0x009D, name: "sep<patternGuard, Dot>" },
    Symbol { id: 0x009E, name: "sep1<patternGuard, Dot>" },
    Symbol { id: 0x009F, name: "__V159" },
    Symbol { id: 0x00A0, name: "sep<recordUpdate, Dot>" },
    Symbol { id: 0x00A1, name: "sep1<recordUpdate, Dot>" },
    Symbol { id: 0x00A2, name: "__VAxiom" }];

pub const VIRTUALS: &[Symbol] = &[];

impl TokenToHimeTerminal for Token {
    fn to_terminals_index(&self) -> usize {
        match self {
            Token::TokLeftParen => 0x3,
            Token::TokRightParen => 0x4,
            Token::TokLeftBrace => 0x5,
            Token::TokRightBrace => 0x6,
            Token::TokLeftSquare => 0x7,
            Token::TokRightSquare => 0x8,
            Token::TokLeftArrow(_) => 0x9,
            Token::TokRightArrow(_) => 0xa,
            Token::TokRightFatArrow(_) => 0xb,
            Token::TokLeftFatArrow(_) => 0xc,
            Token::TokDoubleColon(_) => 0xd,
            Token::TokForall => 0xe,
            Token::TokForallU => 0xf,
            Token::TokEquals => 0x10,
            Token::TokPipe => 0x11,
            Token::TokTick => 0x12,
            Token::TokDot => 0x13,
            Token::TokComma => 0x14,
            Token::TokUnderscore => 0x15,
            Token::TokBackslash => 0x16,
            Token::TokQualLowerName(_,_) => 0x17,
            Token::TokLowerName(_) => 0x18,
            Token::TokSymbolDoubleDot => 0x19,
            Token::TokAdo => 0x1a,
            Token::TokAs => 0x1b,
            Token::TokCase => 0x1c,
            Token::TokClass => 0x1d,
            Token::TokData => 0x1e,
            Token::TokDerive => 0x1f,
            Token::TokDo => 0x20,
            Token::TokElse => 0x21,
            Token::TokFalse => 0x22,
            Token::TokForeign => 0x23,
            Token::TokHiding => 0x24,
            Token::TokImport => 0x25,
            Token::TokIf => 0x26,
            Token::TokIn => 0x27,
            Token::TokInfix => 0x28,
            Token::TokInfixl => 0x29,
            Token::TokInfixr => 0x2a,
            Token::TokInstance => 0x2b,
            Token::TokKind => 0x2c,
            Token::TokLet => 0x2d,
            Token::TokModule => 0x2e,
            Token::TokNewtype => 0x2f,
            Token::TokNominal => 0x30,
            Token::TokPhantom => 0x31,
            Token::TokOf => 0x32,
            Token::TokRepresentational => 0x33,
            Token::TokRole => 0x34,
            Token::TokThen => 0x35,
            Token::TokTrue => 0x36,
            Token::TokType => 0x37,
            Token::TokWhere => 0x38,
            Token::TokQualUpperName(_,_) => 0x39,
            Token::TokUpperName(_) => 0x3a,
            Token::TokQualOperator(_,_) => 0x3b,
            Token::TokOperator(_) =>  0x3c,
            Token::TokColon => 0x3d,
            Token::TokOperatorSub => 0x3e,
            Token::TokOperatorHash => 0x3f,
            Token::TokOperatorAt => 0x40,
            Token::TokQualSymbolName(_,_) => 0x41,
            Token::TokSymbolName(_) => 0x42,
            Token::TokSymbolArr(_) => 0x43,
            Token::TokHole(_) =>  0x44,
            Token::TokChar(_,_) => 0x45,
            Token::TokString(_,_) => 0x46,
            Token::TokRawString(_) => 0x47,
            Token::TokInt(_,_) => 0x48,
            Token::TokNumber(_,_) => 0x49,
            Token::TokLayoutStart => 0x4a,
            Token::TokLayoutSep => 0x4b,
            Token::TokLayoutEnd => 0x4c,
            Token::TokEof => 2,
        }
    }
}